#+TITLE: quickDoc
#+subtitle: An ergonomic lightweight markup language with mnemonic inspirations for writing all kind of documents
#+AUTHOR: Cyprien PIERRE \orcidlink{0009-0009-9040-6795}
#+EMAIL: cyprien.pierre@eiffage.com
#+DATE: {{{time(%Y-%m-%d)}}}
#+setupfile: "~/org/config-tex.org"
#+glossary_sources: ~/org/glossary.org

#+BEGIN_abstract
Rédiger le résumé
#+END_abstract

#+BEGIN_keyword
Mot clé 1, Mot clé 2
#+END_keyword

* Introduction
Le présent document définit *quickDoc*, un nouveau langage de balisage léger conçu pour remplacer l’écosystème vieillissant TeX/LaTeX/BibLaTeX et les formats markdown actuels. *quickDoc* vise à unifier les avantages de ces systèmes tout en répondant à leurs limitations techniques, sémantiques et ergonomiques. Il est destiné à la rédaction de documents scientifiques, littéraires, de documentation technique et de publications, avec des sorties PDF et HTML5 conformes aux normes d’accessibilité WCAG niveau AAA.

*quickDoc* permet de stocker et d’exprimer :
- du contenu textuel formaté (sections, emphase, tableaux, etc.),
- des données structurées (métadonnées, configurations, tables de données typées),
- du code exécutable intégré (avec affichage du résultat dans le document),
- des formules mathématiques (évaluables ou non par un moteur de calcul),
- des références bibliographiques standard (interopérant avec CSL/BibTeX),
- des figures, diagrammes, graphiques et annotations avec leur sémantique.

Ce document est rédigé sous la forme d’une spécification normative de type ISO/RFC. Il énonce la terminologie, le modèle formel (syntaxe et grammaire), les exigences fonctionnelles et non-fonctionnelles, et les règles d’accessibilité et d’interopérabilité du langage *quickDoc*. Les mots "doit" et "ne doit pas" indiquent des exigences obligatoires, tandis que "devrait" indique une recommandation.

* Etat de l'art
# parler en revue de litérature de l'avantage des LML // LaTeX et // word
# parler des problématiques d'incohérences et des specs non rigides
# parler des limites actuelles

Il existe de multiples approches à la production de documents formatés. L'utilisation de logiciels de traitement de texte tels que MS Word, Google Docs ou encore Only Office est probablement la voies la plus largement répendue. Ces solutions proposent des environnements graphiques qui présentent aux utilisateurs les modifications qu'ils peuvent apporter à leurs document. Cette approche a des limitation notamment dans la réalisations de documents exécutable [fn:: *Document exécutable :* Désigne un document dont des éléments sont executé (p. ex. code) et remplacés par le produit de l'exécution (p. ex. schéma ou diagrammes).].

Une autre approche très répendue est d'écrire le formatage du texte en même temps que le contenu. Cette seconde approche implique généralement l'utilisation d'un éditeur de texte comme Neovim, Emacs, iA Writter, etc. associé à un logiciel adapté à la convention de rédaction choisie par l'utilisateur. De manière générale, l'utilisateur utilisera un langage de balisage pour déclarer le formatage.

Il existe ainsi deux grandes catégories de langages de balisages appliqués à la rédaction de documents : les langages formels (TeX, HTML, TEI...) et les langages informels (Markdown, Org-Mode, AsciiDoc...)[cite:@leonardGuidanceMarkdownDesign2016]. Cette seconde catégorie constitue la famille des LML.

** Langages de définition de documents
TeX est le système de composition de documents de référence pour la haute qualité typographique. Basé sur un langage de macro-progammation, il forme le socle de formats tels que *LaTeX*, *ConTeXt*, *Texinfo* ou *OpTeX*. LaTeX, le plus répandu en milieu académique, offre une rigoureuse mise en page et une vaste panoplie de packages spécialisés (p. ex. /TikZ/ pour les figures, /Biber/ pour la bibliographie, /XyMTeX/ pour la chimie, /ArabTeX/ pour l’arabe). Néanmoins, l’utilisation de LaTeX impose une infrastructure lourde: installation d’une distribution TeX complète (par ex. TeX Live ou MikTeX) et souvent d’un éditeur dédié avec complétion et macros (tels qu’Emacs *AUCTeX*, *LyX* ou *Overleaf*). Des projets comme LTeX+ [cite:@LtexplusLtexlsplus2025] et Writefull [cite:@Writefull] permettent d'assister les auteurs dans leurs rédaction pour produire des documents valides.

En pratique, produire un document LaTeX suppose de multiples choix préalables (moteur pdfTeX, LuaTeX ou XeTeX, classes de documents, packages à charger, etc.) et des arbitrages constants pendant la rédaction. Ces considérations techniques induisent des interruptions et de la complexité, pouvant nuire à la concentration de l’auteur. Par ailleurs, bien que LaTeX excelle dans la composition de formules et la gestion fine de la mise en page, il souffre de performances de compilation faibles sur les longs documents et de messages d’erreur cryptiques hérités de TeX, rendant le débogage ardu. L’écosystème LaTeX est fragmenté en de nombreuses distributions et moteurs non parfaitement compatibles entre eux, s’empilant en couches successives depuis les années 80.

Enfin, un défaut critique de LaTeX réside dans l’accessibilité des documents produits. En l’état actuel, LaTeX ne génère pas de PDF balisé de manière fiable pour les lecteurs d’écran et ne permet pas de satisfaire automatiquement aux critères WCAG (notamment avec les formules mathématiques) [cite:@LaTeXAccessibilityGuide2024]. Des solutions partielles (packages d’accessibilité, post-traitements) existent mais restent insuffisantes: il est généralement admis qu’un PDF issu de LaTeX n’est pas directement exploitable pour une diffusion accessible sans corrections manuelles[cite:@LaTeXAccessibilityGuide2024].

** Langages de balisage léger
*Markdown* (MD) est le LML le plus populaire, apprécié pour sa simplicité syntaxique et sa lisibilité en clair. Défini à l’origine de façon minimale (Markdown Basics), il a l’avantage d’être facile à apprendre et à utiliser pour tout un chacun. Cependant, cette simplicité s’est traduite par une couverture fonctionnelle limitée: le Markdown de base n’intègre pas toutes les constructions souhaitables pour la documentation (pas de tables, de notes de bas de page, de mathématiques, etc. sans extensions). Ainsi, de multiples dialectes incompatibles ont proliféré pour combler ces lacunes. Chaque environnement (GitHub, pandoc, StackExchange, etc.) tend à supporter sa variante de Markdown, forçant les utilisateurs à en apprendre plusieurs selon le contexte. Malgré des efforts de standardisation tels que CommonMark (spécification formelle du Markdown de base) et l’enregistrement des variantes auprès de l’IANA, le paysage reste morcelé et source d’incohérences. En résumé, Markdown offre une prise en main aisée mais manque de fonctionnalités avancées et d’uniformité entre implémentations

*Org-mode* (ou son standard Orgdown) est le LML du monde Emacs. Très structuré et puissant, il prend en charge nativement les tâches complexes: gestion d’agenda, tableaux, inclusion de code exécutable avec résultats (via Babel), export vers LaTeX, etc. Org-mode offre ainsi bien plus de possibilités sémantiques que Markdown grâce à son intégration étroite avec Emacs et LaTeX (macros Emacs Lisp pour étendre le langage). Cette richesse fait d’Org-mode un outil prisé par les utilisateurs avancés d’Emacs. Cependant, son principal inconvénient est d’être fortement lié à Emacs : l’expérience complète d’Org-mode repose sur l’environnement Emacs, ce qui le rend difficilement portable hors de celui-ci. En dehors de certains parsers tiers limités, on ne dispose pas d’éditeurs universels pleinement compatibles avec Org-mode. Son usage reste donc confidentiel hors du cercle des emacsophiles, malgré ses indéniables atouts.

*AsciiDoc* est un LML majeur, soutenu aujourd’hui par l'Eclipse Foundation. Plus complet que Markdown, il couvre quasiment tous les besoins de rédaction (titres hiérarchiques, tableaux complexes, inclusions, admonitions, etc.) et dispose d’une documentation exhaustive. De plus, AsciiDoc a fait ses preuves dans des projets industriels et open-source, grâce à une gouvernance communautaire solide. Néanmoins, cette exhaustivité a pour contrepartie une courbe d’apprentissage plus exigeante qu’avec Markdown. Un nouvel utilisateur peut être intimidé par l’ampleur de la syntaxe et des options d’AsciiDoc. En pratique, AsciiDoc (notamment via son implémentation Asciidoctor) est très utilisé pour la documentation logicielle, les manuels techniques et les livres, où sa richesse fonctionnelle justifie l’investissement. Son principal défi reste de conserver la facilité d’écriture propre aux LML tout en offrant des fonctionnalités proche de LaTeX.



** Emergence d'un besoin
=> Specify (github)
=> LLM
=> CBE

conclusion : création de *quickDoc*

* Syntaxe
** Définition
Un bloc de texte est constituée d'une ligne continue et de la première ligne vide immédiatement en dessous. Un retour chario n'entraine alors pas de création d'un nouveau bloc.

** Balisage
Le texte d'un bloc peut être formaté au niveau d'une lettre, d'un mot, d'une ligne continue ou d'un ensemble de ligne continue espacées entres elles d'un unique retour chariot.

Le formattage se réalise en entourant /explicitement/ le contenu à formater par les balises de formatage. Ces balises sont des symboles textuels accessibles facilement sur un clavier. Le tableau [[table:formatings]] liste les balises utilisées par *quickDoc* et présente 3 des modalitées d'emplois. Il existe une tollérance pour le formatage d'une ligne complète, comme l'ensemble de la ligne est formatée jusqu'au retour chariot alors il convient d'apposer /uniquement/ une double marque en début de ligne.  

#+CAPTION: Liste des balisages
#+NAME: table:formatings
#+ATTR_LATEX: :environment longtable
|-------------+--------+----------+------------+----------+-----------------------------------|
| Type        | Balise | HTML5    | Une lettre | Un mot   | Une ligne                         |
|-------------+--------+----------+------------+----------+-----------------------------------|
| Superscript | ~+~    |          | ~+l+etter~ | ~+word+~ | ~++ this is a superscripted line~ |
| Subscript   | ~-~    |          | ~-l-etter~ | ~-word-~ | ~-- this is a subscripted line~   |
| Strique     | ~~~    |          | ~~l~etter~ | ~~word~~ | ~~~~this is a striked line~       |
| Highlight   | ~=~    |          | ~=l=etter~ | ~=word=~ | ~== this is an highlighted line~  |
| Comment     | ~;~    |          | ~;l;etter~ | ~;word;~ | ~;; this is a commented line~     |
| Bold        | ~*~    | <strong> | ~*l*etter~ | ~*word*~ | ~** this is a bolded line~        |
| Italique    | ~/~    | <em>     | ~/l/etter~ | ~/word/~ | ~// this is an italicised line~   |
| Underline   | ~_~    |          | ~_l_etter~ | ~_word_~ | ~__ this is an underlined line~   |
| Verbatim    | ~:~    |          | ~:l:etter~ | ~:word:~ | ~:: this is a line of verbatim~   |
| Math        | ~$~    |          | ~$l$etter~ | ~$word$~ | ~$$ this is a line of math~       |
| Code        | ~`~    |          | ~`l`etter~ | ~`word`~ | ~`` this is a line of code~       |
|-------------+--------+----------+------------+----------+-----------------------------------|

La mise en forme d'un ensemble de ligne continues est réalisée par l'inscription de trois balises à la ligne précédent et celle suivant le texte à mettre en forme. Cette mise en forme est valide pour toutes les marques pour des raisons d'uniformité synthaxique bien que certains formatages n'ai que peu de raisons d'être employés de la sorte. La création d'un formatage multiligne se construit de la manière suivante :
#+latex: \begin{multicols}{2}
#+CAPTION: Bloc de code
#+BEGIN_EXAMPLE 
```<parametres>
 <code
 sur plusieurs
 lignes>
```
#+END_EXAMPLE

#+CAPTION: Bloc de commentaire
#+BEGIN_EXAMPLE
;;; <parametres>
 <commentaires
 sur plusieurs
 lignes>
;;;
#+END_EXAMPLE
  
#+CAPTION: Bloc de mathématiques
#+BEGIN_EXAMPLE 
$$$ <parametres>
 <formule mathématique
 sur plusieurs
 lignes>
$$$
#+END_EXAMPLE

#+CAPTION: Bloc de verbatim
#+BEGIN_EXAMPLE 
::: <parametres>
 <formule mathématique
 sur plusieurs
 lignes>
:::
#+END_EXAMPLE
#+latex: \end{multicols}

Les blocs de codes peuvent être configurer de manière à obtenir plusieurs comportements. Les paramètres sont à inscrire sous la forme ~[[[set <parameter-name>:<value>]]]~ avec les parametres suivants :
- ~lang~ : défini le langage utilisé pour le formatage du texte,
- ~runtime~ : défini le moteur d'éxecution le cas échéant et si pertinent (e.g. deno, node, bun, etc.).
- ~play~ : autorise l'execution du code avec ~t~ et l'empêche par défaut (~nil~).
- ~export~ : précise ce qui doit être imprimé lors de l'export. Ce paramètre peut prendre spécifiquement les valeurs suivantes :
  - ~verbatim~ : imprime le code en police monospace avec son formatage et coloration synthaxique,
  - ~result~ : remplace le bloc de code avec son résultat (e.g. un graphique, un tableau, etc.),
  - ~both~ : imprime successivement le code en verbatim puis son résultat,
  - ~neither~ : n'imprime rien.

Un exemple complet de bloc de code : \breakline
~`` [[[set lang:python export:result]]] import matplotlib.pyplot as plt; plt.plot([1, 2, 3], [4, 5, 6]); plt.show()~

[[./quickDoc-exemple-code.png]]

#+LATEX: \newline
Les blocs de commentaires sont de 4 types :
- sans précision, ils ne sont pas exportées
- avec ~type:todo-inline~ ils impriment un bloc de type "TODO" en lieu et place ten que celui ci : \todo[inline]{bloc "TODO" en ligne}
- avec ~type:todo~ ils impriment un bloc de type "TODO" dans la marge du document tel que celui ci : \todo{e.g.}
- avec ~type:properties~ il permet de créer une liste de propriétées pour le bloc associée tel que :
    : Ceci est un bloc de texte avec des propriétées attachées.
    : ;; [[[set type:properties key1:value1 key2:value2]]]
#+LATEX: \newline
Les blocs de mathématiques peuvent être associées à un résolveur d'équation tel que :
~$$ [[[set solver:<nom du résolveur>]]] <equation>~
Quelques exemples de résolveurs : Math.js, SymPy, Maxima, SageMath, Wolfram Alpha, etc.
#+LATEX: \newline
Les blocs verbatims peuvent être mis en forme en renseignant un type en lieu et place du <parametres> sous la forme ~[[[set type:<value>]]]~. Ces types de blocs s'appellent des /admonitions/[cite:@donathAdmonitionsMaterialMkDocs] et peuvent prendre les valeurs suivantes : note, abstract, info, tip, success, question, warning, failure, danger, bug, exemple, quote, keywords, answer, hypothesis, theorem, proof.

Les verbatims peuvent également être utilisés pour collecter des entrées utilisateurs et créer des formulaires en écrivant ~:[[[get <property> <key>:<value>]]]:~ où ~<key>~ correspond au type attendu et ~<value>~ correspond à la contrainte associée. Par exemple, voici des appels d'entrées valides :
- ~:[[[get user-name string:20]]]:~ donnera ~____________________~ et sera affecté à la propriété "user-name",
- ~:[[[get user-lang string:2]]]:~ donnera ~__~ et sera affecté à la propriété "user-lang".

Les balises peuvent être combinées entre elles dans les limites de la matrice de compatibilité présentée par le tableau [[table:compatibility]]. La combinaison du superscript et du subscript produit un middlescript.

#+CAPTION: Compatibility matrix between formatings
#+NAME: table:compatibility
|-------------+----+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+------------------------------+------------------------------|
| Beacon Type | N° | 1                              | 2                              | 3                              | 4                              | 5                              | 6                              | 7                              | 8                              | 9                              | 10                           | 11                           |
|-------------+----+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+------------------------------+------------------------------|
| Highlight   |  1 | x                              | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{red}{0}@@ | @@latex:\textcolor{red}{0}@@ |
| Strike      |  2 | @@latex:\textcolor{green}{1}@@ | x                              | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{red}{0}@@ | @@latex:\textcolor{red}{0}@@ |
| Subscript   |  3 | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | x                              | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{red}{0}@@ | @@latex:\textcolor{red}{0}@@ |
| Superscript |  4 | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | x                              | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{red}{0}@@ | @@latex:\textcolor{red}{0}@@ |
| Bold        |  5 | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | x                              | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@ | @@latex:\textcolor{red}{0}@@ |
| Comment     |  6 | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | x                              | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@ | @@latex:\textcolor{red}{0}@@ |
| Italique    |  7 | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | x                              | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@ | @@latex:\textcolor{red}{0}@@ |
| Underline   |  8 | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | x                              | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@ | @@latex:\textcolor{red}{0}@@ |
| Verbatim    |  9 | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{green}{1}@@ | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | x                              | @@latex:\textcolor{red}{0}@@ | @@latex:\textcolor{red}{0}@@ |
| Inline Math | 10 | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | x                            | @@latex:\textcolor{red}{0}@@ |
| Inline Code | 11 | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@   | @@latex:\textcolor{red}{0}@@ | x                            |
|-------------+----+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+--------------------------------+------------------------------+------------------------------|

Lists begins with a bullets that represent their meaning followed by a space. The following is supported :
- Ordered lists starts with ~1.~,
- Unordered lists starts with ~-~,
- Headers are lists too and starts with a ~#~, the number of ~#~ set the level of the header.

Unordered lists and headers bullets can be followed by a multivalue key in the form of ~[<state>:<priority>:<impact>]~ with all optionnal values :
- a formal ~<state>~ : TODO, PLANED, DOING, PAUSE, DONE, ABORTED, 
- an estimated ~<priority>~ value : A, B, C, D, E,
- an ~<impact>~ factor : 5, 4, 3, 2 ,1.

#+BEGIN_EXAMPLE
# [TODO:B:3] Title with a full key

  - [DOING:5] a task with a high impact factor
      - [ ] a check box action
      - [x] a checked check box action
#+END_EXAMPLE

Sublevels (nested lists) are supported for headers, ordered and unordered lists. There must be 4 spaces before the sublevel bullet.

#+latex: \begin{multicols}{3}
#+CAPTION: Indentation des titres
#+BEGIN_EXAMPLE
# First level header
    ## Second    
        ### Third
#+END_EXAMPLE

#+CAPTION: Indentation des listes non ordonnées
#+BEGIN_EXAMPLE
- First unordered list
    - Second
        - Third
#+END_EXAMPLE

#+CAPTION: Indentation des listes ordonnées
#+BEGIN_EXAMPLE
1. First ordered list
    1.1. Second
        1.1.1. Third
#+END_EXAMPLE
#+latex: \end{multicols}

The export backend shall provide settings to customise desired formatting outputs of ordered lists (alpha-numeric numbering, dots, parentheses...) 

** Snippets
Tous les blocs de textes peuvent être associées à des tags.
Un tag s'écrit ~#<tag>~ peut être insérée à n'importe quel endroit du bloc de texte en respectant les rêgles de balisage décrites au paragraphe [[Balisage]].

#+CAPTION: liste des snippets
|----------+------------+--------------------------------------|
| Type     | Lemma      | Behavior                             |
|----------+------------+--------------------------------------|
| Ref Link | ~@element~ | Insère un ~[[lien]]~ unidirectionnel |
| Tag      | ~#tag~     | Insère un ~[[lien]]~ bidirectionnel  |
|----------+------------+--------------------------------------|

Les tags sont utilisés pour faire de l'analyse sémantique. Ecrire un tag entraine la création ou la mise à jour d'un fichier "tag_<nom-du-tag>.qdo" constitué comme ceci :
: # Nom-du-tag
: [[[get count:?]]] ;; nombre d'occurence dans le projet
: [[[get blocs:?nom-du-tag]]] ;; tous les blocs utilisants le tag

L'instruction ~[[[get blocs:?nom-du-tag]]]~ peut être complété par un système de tris. Par exemple, pour lister les blocs par ordre de date décroissante on écrira ~[[[get blocs:?nom-du-tag order-by:date-desc]]]~.

Un système de trâme permettant aux utilisateurs de préconfigurer ces documents et de modifier en lot leurs configuration serait un atoût en matière d'expérience utilisateur.

** Callouts
Callouts are bidirectional links inside the current document. They are used to quickly jump to content, a reference, or a definition.

#+CAPTION: Text callouts
|-------------+-----------------+----------|
| Type        | Lemma           | Behavior |
|-------------+-----------------+----------|
| Reference   | ~[ref:@entry]~  |          |
| Foot Note   | ~[fn:note]~     |          |
| Quote       | ~[cite:@entry]~ |          |
| Figure ref  | ~[fig:name]~    |          |
| Table ref   | ~[tbl:name]~    |          |
| Code ref    | ~[src:name]~    |          |
| Header jump | ~[header]~      |          |
|-------------+-----------------+----------|

** Links
Tous les liens suivent l'écriture ~[[<CONTEXT>:<LINK>:<QUERY>][<TEXT>]]~ pù seul le ~<LINK>~ *doit* être renseigné. Les autres éléments sont : 
- ~<CONTEXT>~ fournis des informations complémentaires pour l'affichage du lien. Cela permet de mettre en oeuvre des affichages adaptés aux images, vidéos, player de musique, flux RSS, etc.
- ~<LINK>~ is the path of the resource on the World Wide Web, in a file system, or on any supported network. We can call a `Header ID` from the current document or from another one.
- ~<QUERY>~ est utilisé pour renvoyer vers une section particulière du lien (un titre, un callout, etc.). Une requete s'écris ~?[<key>:<value>]~, où la clé est n'importe quelle propriété et la valeur est n'importe quelle chaine de charactère.
- ~<TEXT>~ est le texte de remplacement à afficher à la place du lien.


#+CAPTION: <LINK> types
|------------+-------------------------+---------------------------------|
| Type       | Lemma                   | Can be used to                  |
|------------+-------------------------+---------------------------------|
| URI        |                         |                                 |
| Web URL    | ~[[https:link]]~        | Display a bookmark              |
| Local File | ~[[file:<path>]]~       |                                 |
| Musique    | ~[[:<path or url>]]~    | Display a music player          |
| Image      | ~[[img:<path or url>]]~ |                                 |
| Document   | ~[[doc:<path or url>]]~ | Display a document viewer       |
| Video      | ~[[vid:<path or url>]]~ | Display a video player          |
| Header ID  | ~[[id:headerId]]~       |                                 |
| RSS Flow   | ~[[rss:<url>]]~         | Display a list of last entries  |
| IRC Flow   | ~[[irc:<url>]]~         | Display a list of last messages |
| Email      | ~[[mailto:<email>]]~    | Display a contact form          |
|------------+-------------------------+---------------------------------|

** Macroprogramme
Des utilisations avancées de documentation programmatique peuvent faire appel à des macros définies par l'utilisateur ou par la plateforme de service.

Dans quickDoc, ces macros sont appellées avec trois crochets tels que : ~[[[<macro-name>]]]~

Elles sont définies par l'utilisateur comme ceci :
: [[[defmacro <macro-name>
:        <macro-code>
: ]]]

** Configuration
One might consider using a separate file to manage, preserve, and share all its configurations.
That might be a file for LML styles and tweaks, one for special export settings (e.g., TeX, ODT, or HTML).
A good way to go is by declaring at the first line of the document 
: ;;[[[set config file:file1 file:file... file:fileN]]]

*** Text layout
First, define a style like
: [[[set text_style name:paraghaphe scope:raw-text al:justif size:12 long:80char color:black font:source-sans-pro columns:nil]]]

Then apply it, it will be set from the statement until the new one.
: [[[use text-style name:paragraphe]]]

* Consistency analysis
A consistent lightweight markup language shall have only one way to format text.

Markdown variants on the [[table:consistency]] are limited to those listed by IANA's "Markdown Variant" [cite:@MarkdownVariants2023]. We exclude SSW and Quarto, the first one is too contextual and the second is based on Pandoc markdown.

#+CAPTION: Text formatting consistency versus Markdown variants
#+NAME: table:consistency
|------------------------------------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----|
| Format                                                           | Bol | Ita | OrL | UnL | Und | Hig | Str | Ver | Cod | Sup | Sub | Com |
|------------------------------------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----|
| quickDoc                                                         |   1 |   1 |   1 |   1 |   1 |   1 |   1 |   1 |   1 |   1 |   1 |   1 |
| Common Markdown[cite:@johnmacfarlaneCommonMarkSpec2024]          |     |     |     |     |     |     |     |     |     |     |     |     |
| MultiMarkdown[cite:@fletchert.penneyMultiMarkdownUsersGuide2023] |     |     |     |     |     |     |     |     |     |     |     |     |
| Github Flavored Markdown[cite:@GitHubFlavoredMarkdown2019]       |     |     |     |     |     |     |     |     |     |     |     |     |
| Pandoc[cite:@johnmacfarlanePandocUsersGuide2025]                 |     |     |     |     |     |     |     |     |     |     |     |     |
| Fountain[cite:@SyntaxFountain]                                   |     |     |     |     |     |     |     |     |     |     |     |     |
| Markdown for RFCs[cite:@thomasleitnerKramdownSyntax]             |     |     |     |     |     |     |     |     |     |     |     |     |
| Pandoc2rfc                                                       |     |     |     |     |     |     |     |     |     |     |     |     |
| Markdown Extra[cite:@PHPMarkdownExtra]                           |     |     |     |     |     |     |     |     |     |     |     |     |
| Markedly Structured Text[cite:@JupyterbookMystmd2025]            |     |     |     |     |     |     |     |     |     |     |     |     |
| AsciiDoc                                                         |     |     |     |     |     |     |     |     |     |     |     |     |
| reStructuredText                                                 |     |     |     |     |     |     |     |     |     |     |     |     |
| Orgdown (Org-Mode)                                               |     |     |     |     |     |     |     |     |     |     |     |     |
| Textile                                                          |     |     |     |     |     |     |     |     |     |     |     |     |
| Djot                                                             |     |     |     |     |     |     |     |     |     |     |     |     |
| Wikitext                                                         |     |     |     |     |     |     |     |     |     |     |     |     |
| Creole                                                           |     |     |     |     |     |     |     |     |     |     |     |     |
| txt2tags                                                         |     |     |     |     |     |     |     |     |     |     |     |     |
| Setext                                                           |     |     |     |     |     |     |     |     |     |     |     |     |
|------------------------------------------------------------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----|
#+begin_tablenotes
\begin{multicols}{3}\small
\begin{itemize}
  \item Bol : Bold
  \item Ita : Italique
  \item OrL : Ordered List
  \item UnL : Unordered List
  \item Und : Underline
  \item Hig : Highlight
  \item Str : Strike
  \item Ver : Verbatim
  \item Cod : Inline code
  \item Sup : Superscript
  \item Sub : Subscript
  \item Com : Comment
\end{itemize}
\end{multicols}
#+end_tablenotes

* Capacity analysis

* Typesystem compatibility
# study Scrible, Typst, TeX, HTML...

* Conclusion

#+LATEX: \clearpage
# /Nous avons beau parler la même langue, nous ne parlons pas toujours le même langage./

* Références du document
** Liste des figures
  #+LATEX: \renewcommand{\listfigurename}{\vspace{-2em}}
  #+LATEX: \listoffigures

** Liste des tableaux
  #+LATEX: \renewcommand{\listtablename}{\vspace{-2em}}
  #+LATEX: \listoftables

** Liste des codes sources
  #+LATEX: \renewcommand{\lstlistingname}{\vspace{-2em}}
  #+LATEX: \lstlistoflistings

** Liste des glosses
  #+LATEX: \begin{multicols}{2}\small{
  #+print_glossary: :type glossary :only-contents t
  #+LATEX: }\end{multicols}
  
** Liste des acronymes
  #+LATEX: \begin{multicols}{2}\small{
  #+print_glossary: :type acronym :only-contents t
  #+LATEX: }\clearpage\end{multicols}

* Bibliographie
  #+LATEX: \begin{multicols}{2}\small{
  #+print_bibliography: :heading none
  #+LATEX: }\clearpage\end{multicols}
